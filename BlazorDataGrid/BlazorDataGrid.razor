@typeparam TableItem

@inherits BlazorDataGridBase
@using BlazorDataGrid.Services
@inject AppState AppState


<style>
    .blazor-grid-header {
        text-align: center;
        border-collapse: collapse;
        background: #ebebeb;
    }

    .blazor-row-item:hover {
        background: #9fcdf4;
    }

    th, td {
        padding: 15px;
        border: 1px solid #d1d1d1;
        text-align: center;
    }

    .pagebutton {
        margin-right: 5px;
        margin-top: 5px;
    }

    .currentpage {
        background-color: dodgerblue;
        color: white;
    }
</style>

@if (ShowTotalResult)
{
    if (@Items.Count() != @initCount)
    {
        <h4 class="TotalCount">@(ItemList.Count() <= 1 ? Translation["filteredresults"] : Translation["filteredresultsplural"])</h4>
    }
    else
    {
        <h4 class="TotalCount">@(Items.Count() <= 1 ? Translation["totalresult"] : Translation["totalresultplural"])</h4>
    }
}
<table class="@TableClass" style="@TableStyle">
    <thead class="@TheadClass" style="@TheadStyle">
        <tr>
            <CascadingValue Value="this">
                @BlazorDataGridColumn
            </CascadingValue>
        </tr>

    </thead>
    <tbody class="@TbodyClass" style="@TbodyStyle">
        @OtherContent
        @foreach (var item in ItemList)
        {
            <tr class="blazor-row-item">@GridRow(item)</tr>
        }
    </tbody>
</table>
<div class="pagination">

    <div style="margin-right:5px">
        Résultats par page :
        <select @bind="@PageSize">
            @foreach (var item in PageSizeList)
            {
                <option value="@item.Value">@item.Label</option>
            }
        </select>
    </div>

    <button class="btn pagebutton btn-info" @onclick=@(async () => SetPagerSize("back"))>&laquo;</button>
    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("previous"))>@Translation["previous"]</button>

    @for (int i = startPage; i <= endPage; i++)
    {
        var currentPage = i;
        <button class="btn pagebutton @(currentPage==curPage?"currentpage":"")" @onclick=@(async () => updateList(currentPage))>
            @currentPage
        </button>
    }

    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("next"))>@Translation["next"]</button>
    <button class="btn pagebutton btn-info" @onclick=@(async () => SetPagerSize("forward"))>&raquo;</button>

    <span class="pagebutton btn btn-link disabled">@Translation["pages"]</span>

</div>

@functions {
    int totalPages;
    int curPage;
    int pagerSize;

    int startPage;
    int endPage;

    int initCount;

    public string CurrentSortColumn;

    private int _pageSize = 5;
    [Parameter]
    public int PageSize
    {
        get => _pageSize;
        set
        {
            _pageSize = value;
            curPage = 1;
            StateHasChanged();
            updateList(curPage);
            SetPagerSize("filtre");
        }
    }

    public int ItemPerPage { get; set; }


    [Parameter]
    public RenderFragment BlazorDataGridColumn { get; set; }


    [Parameter]
    public RenderFragment<TableItem> GridRow { get; set; }

    [Parameter]
    public IEnumerable<TableItem> Items { get; set; }

    [Parameter]
    public bool ShowTotalResult { get; set; } = false;

    [Parameter]
    public RenderFragment OtherContent { get; set; }

    [Parameter]
    public string TableClass { get; set; } = "table table-striped table-bordered mdl-data-table";

    [Parameter]
    public string TheadClass { get; set; } = "thead-inverse";

    [Parameter]
    public string TbodyClass { get; set; }

    [Parameter]
    public string TableStyle { get; set; }

    [Parameter]
    public string TheadStyle { get; set; }

    [Parameter]
    public string TbodyStyle { get; set; }

    [Parameter]
    public Dictionary<string, string> Translation { get; set; }

    #region Translation
    string OriginalPages { get; set; }
    string OriginalTotalResult { get; set; }
    string OriginalTotalResultPlural { get; set; }
    string OriginalFilteredResults { get; set; }
    string OriginalFilteredResultsPlural { get; set; }
    #endregion


    IEnumerable<TableItem> ItemList { get; set; }

    public Dictionary<string, string> FilterDictionary { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ShowPageSelector)
        {
            if (PageSizeList == null)
            {
                PageSizeList = new List<PageSizeStruct>
        {
                    new PageSizeStruct() {Label = "5", Value = 5},
                    new PageSizeStruct() {Label = "10", Value = 10},
                    new PageSizeStruct() {Label = "25", Value = 25},
                    new PageSizeStruct() {Label = "50", Value = 50},
                    new PageSizeStruct() {Label = "100", Value = 100},
                    new PageSizeStruct() {Label = "Tout", Value = 0},
                };
            }
            pagerSize = 5;
            PageSize = 5;
        }

        curPage = 1;
        initCount = Items.Count();
        if (PageSize == 0)
        {
            ItemList = Items;
            totalPages = 1;
            pagerSize = 1;
        }
        else
        {
            ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
            totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
            pagerSize = 5;
        }

        AppState.RefreshRequested += RefreshMe;

        FilterDictionary = new Dictionary<string, string>();

        //SetPagerSize("forward");

        InitTranslationDictionnary();
        UpdateTranslationDictionnary();
    }

    private void RefreshMe()
    {
        StateHasChanged();
        curPage = 1;
        updateList(curPage);
        SetPagerSize("filtre");
    }

    public void updateList(int currentPage)
    {
        if (PageSize == 0)
        {
            ItemList = Items;
            totalPages = 1;
        }
        else
        {
            ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
            totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        }
        curPage = currentPage;
        this.StateHasChanged();
        UpdateTranslationDictionnary();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        if (direction == "filtre")
        {
            startPage = 1;
            endPage = pagerSize;
            if (endPage > totalPages)
            {
                endPage = totalPages;
            }
            //if (endPage < totalPages)
            //{
            //    if (endPage + pagerSize < totalPages)
            //    {
            //        endPage = startPage + pagerSize - 1;
            //    }
            //    else
            //    {
            //        endPage = totalPages;
            //    }
            //}
        }
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }

        updateList(curPage);
        UpdateTranslationDictionnary();
    }

    private void InitTranslationDictionnary()
    {
        if (Translation is null)
        {
            Translation = new Dictionary<string, string>();
            Translation.Add("previous", "Prec.");
            Translation.Add("next", "Suiv.");
            Translation.Add("pages", $"Page {curPage} de {totalPages}");
            OriginalPages = "Page __curpage__ de __totalpages__";
            Translation.Add("totalresult", $"{Items.Count().ToString()} enregistrement");
            Translation.Add("totalresultplural", $"{Items.Count().ToString()} enregistrements");
            OriginalTotalResult = "__totalcount__ enregistrement";
            OriginalTotalResultPlural = "__totalcount__ enregistrements";

            Translation.Add("filteredresults", $"{@Items.Count()} résultat sur {@initCount} enregistrements");
            OriginalFilteredResults = "__filteredcount__ résultat sur __totalcount__ enregistrements";
            Translation.Add("filteredresultsplural", $"{@Items.Count()} résultats sur {@initCount} enregistrements");
            OriginalFilteredResultsPlural = "__filteredcount__ résultats sur __totalcount__ enregistrements";

        }
        else
        {
            if (!Translation.ContainsKey("previous"))
            {
                Translation.Add("previous", "Prec.");
            }
            if (!Translation.ContainsKey("next"))
            {
                Translation.Add("next", "Suiv.");
            }
            if (!Translation.ContainsKey("pages"))
            {
                Translation.Add("pages", $"Page {curPage} de {totalPages}");
                OriginalPages = "Page __curpage__ de __totalpages__";
            }
            else
            {
                OriginalPages = Translation["pages"];
            }

            if (!Translation.ContainsKey("totalresult"))
            {
                Translation.Add("totalresult", $"{Items.Count().ToString()} enregistrement");
                OriginalTotalResult = "__totalcount__ enregistrement";
            }
            else
            {
                OriginalTotalResult = Translation["totalresult"];
            }

            if (!Translation.ContainsKey("totalresultplural"))
            {
                Translation.Add("totalresultplural", $"{Items.Count().ToString()} enregistrements");
                OriginalTotalResultPlural = "__totalcount__ enregistrements";
            }
            else
            {
                OriginalTotalResultPlural = Translation["totalresultplural"];
            }

            if (!Translation.ContainsKey("filteredresults"))
            {
                Translation.Add("filteredresults", $"{Items.Count()} résultat sur {initCount} enregistrements");
                OriginalFilteredResults = "__filteredcount__ résultat sur __totalcount__ enregistrements";
            }
            else
            {
                OriginalFilteredResults = Translation["filteredresults"];
            }

            if (!Translation.ContainsKey("filteredresultsplural"))
            {
                Translation.Add("filteredresultsplural", $"{Items.Count()} résultats sur {initCount} enregistrements");
                OriginalFilteredResultsPlural = "__filteredcount__ résultats sur __totalcount__ enregistrements";
            }
            else
            {
                OriginalFilteredResultsPlural = Translation["filteredresultsplural"];
            }
        }
    }

    private void UpdateTranslationDictionnary()
    {
        try
        {
            Translation["pages"] = OriginalPages?.Replace("__curpage__", curPage.ToString())
                                                .Replace("__totalpages__", totalPages.ToString());

            Translation["totalresult"] = OriginalTotalResult?.Replace("__totalcount__", Items?.Count().ToString());

            Translation["totalresultplural"] = OriginalTotalResultPlural?.Replace("__totalcount__", Items?.Count().ToString());

            Translation["filteredresults"] = OriginalFilteredResults?.Replace("__filteredcount__", Items?.Count().ToString())
                                                          .Replace("__totalcount__", initCount.ToString());

            Translation["filteredresultsplural"] = OriginalFilteredResultsPlural?.Replace("__filteredcount__", Items?.Count().ToString())
                                                                .Replace("__totalcount__", initCount.ToString());
        }
        catch (System.NullReferenceException nre)
        {
            Console.WriteLine(nre.Message);
        }
    }

}
