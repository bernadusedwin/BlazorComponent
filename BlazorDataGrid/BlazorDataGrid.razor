@typeparam TableItem

@using BlazorDataGrid.Services
@inject AppState AppState


<style>
    .blazor-grid-header {
        text-align: center;
        border-collapse: collapse;
        background: #ebebeb;
    }

    .blazor-row-item:hover {
        background: #9fcdf4;
    }

    th, td {
        padding: 15px;
        border: 1px solid #d1d1d1;
        text-align: center;
    }

    .pagebutton {
        margin-right: 5px;
        margin-top: 5px;
    }

    .currentpage {
        background-color: dodgerblue;
        color: white;
    }
</style>

<table class="table table-striped table-bordered mdl-data-table">
    <thead class="thead-inverse">
        <tr>
            <CascadingValue Value="this">
                @BlazorDataGridColumn
            </CascadingValue>
        </tr>

    </thead>
    <tbody>
        @OtherContent
        @foreach (var item in ItemList)
        {
            <tr class="blazor-row-item">@GridRow(item)</tr>
        }
    </tbody>
</table>
<div class="pagination">

    <button class="btn pagebutton btn-info" @onclick=@(async () => SetPagerSize("back"))>&laquo;</button>
    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("previous"))>Prec.</button>

    @for (int i = startPage; i <= endPage; i++)
    {
        var currentPage = i;
        <button class="btn pagebutton @(currentPage==curPage?"currentpage":"")" @onclick=@(async () => updateList(currentPage))>
            @currentPage
        </button>
    }

    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("next"))>Suiv.</button>
    <button class="btn pagebutton btn-info" @onclick=@(async () => SetPagerSize("forward"))>&raquo;</button>

    <span class="pagebutton btn btn-link disabled">Page @curPage de @totalPages</span>

</div>

@functions {
    int totalPages;
    int curPage;
    int pagerSize;

    int startPage;
    int endPage;

    public string CurrentSortColumn;

    [Parameter]
    private RenderFragment BlazorDataGridColumn { get; set; }


    [Parameter]
    RenderFragment<TableItem> GridRow { get; set; }

    [Parameter]
    public IEnumerable<TableItem> Items { get; set; }

    [Parameter]
    int PageSize { get; set; }

    [Parameter]
    RenderFragment OtherContent { get; set; }

    IEnumerable<TableItem> ItemList { get; set; }


    public Dictionary<string, string> FilterDictionary { get; set; }

    protected override async Task OnInitAsync()
    {
        pagerSize = 5;
        curPage = 1;

        ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
        totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);

        AppState.RefreshRequested += RefreshMe;

        FilterDictionary = new Dictionary<string, string>();

        SetPagerSize("forward");
    }

    private void RefreshMe()
    {
        StateHasChanged();
        updateList(curPage);
    }

    public void updateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }

        updateList(curPage);
    }

}
