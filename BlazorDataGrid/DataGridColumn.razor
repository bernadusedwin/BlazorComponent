@typeparam TItem
@inherits BlazorGridColumnBase

@using BlazorDataGrid.Services
@inject AppState AppState

<th>
    @if (ChildContent != null)
    {
        <span @onclick="@(() => SortTable(ColumnName))">@ChildContent</span>
    }
    else
    {
        <span @onclick="@(() => SortTable(ColumnName))">@DisplayColumnName</span>
    }
    <span class="oi @(GetSortStyle(ColumnName))"></span>
    @if (Filter && !DropdownFilter)
    {
        <form>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm" @oninput="@((e) => OnInput(e))" />
            </div>
        </form>
    }
    @if (DropdownFilter)
    {
        <div class="input-group mb-3">
            <select class="custom-select" id="inputGroupSelect01" @bind="@SelectedDropdownFilter">
                <option selected value=""></option>
                @foreach (var item in CreateFilterList())
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    }
</th>



@functions {
    [Parameter]
    public string ColumnName { get; set; }
    [Parameter]
    public string DisplayColumnName { get; set; } = string.Empty;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Filter { get; set; } = false;

    [Parameter]
    public bool DropdownFilter { get; set; } = false;

    [CascadingParameter]
    BlazorDataGrid.BlazorDataGrid<TItem> BlazorDataTable { get; set; }

    private bool IsSortedAscending;

    protected int DebounceMilliseconds { get; set; } = 800;

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    private string PreviousValue { get; set; } = string.Empty;

    private string _selectedDropdownFilter;
    protected string SelectedDropdownFilter {
        get => _selectedDropdownFilter;
        set
        {
            _selectedDropdownFilter = value;
            Filtering(value, ColumnName);
        }
    }

    private void SortTable(string columnName)
    {
        if (columnName != BlazorDataTable.CurrentSortColumn)
        {
            BlazorDataTable.Items = BlazorDataTable.Items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();

            BlazorDataTable.CurrentSortColumn = columnName;
            IsSortedAscending = true;
            AppState.CallRequestRefresh();

        }
        else
        {
            if (IsSortedAscending)
            {
                BlazorDataTable.Items = BlazorDataTable.Items.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                BlazorDataTable.Items = BlazorDataTable.Items.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            AppState.CallRequestRefresh();
            IsSortedAscending = !IsSortedAscending;
        }
    }

    private string GetSortStyle(string columnName)
    {
        if (BlazorDataTable.CurrentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (IsSortedAscending)
        {
            return "oi-arrow-thick-top";
        }
        else
        {
            return "oi-arrow-thick-bottom";
        }
    }

    private void Filtering(string value, string columnName)
    {
        BlazorDataTable.FilterDictionary[columnName] = value;

        if (value.Length < PreviousValue.Length)
        {
            BlazorDataTable.Items = Items;
        }

        foreach (var column in BlazorDataTable.FilterDictionary)
        {
            BlazorDataTable.Items = BlazorDataTable.Items.Where(x => x.GetType().GetProperty(column.Key).GetValue(x, null).ToString().IndexOf(column.Value, StringComparison.OrdinalIgnoreCase) >= 0).ToList();
        }

        AppState.CallRequestRefresh();
        PreviousValue = value;
    }

    private List<string> CreateFilterList()
    {
        List<string> filterList = new List<string>();

        var properties = typeof(TItem).GetProperties();
        foreach (var item in Items)
        {
            foreach (var property in properties)
            {
                if (string.Equals(property.Name, ColumnName, StringComparison.OrdinalIgnoreCase))
                {
                    if (!filterList.Any(x => x == property.GetValue(item, null).ToString()))
                    {
                        filterList.Add(property.GetValue(item, null).ToString());
                    }
                }
            }
        }
        filterList.Sort();
        return filterList;
    }

    private void OnInput(UIChangeEventArgs eventArgs)
    {
        var filterValue = ((UIChangeEventArgs)eventArgs).Value?.ToString();
        Debounce(eventArgs, DebounceMilliseconds, async (e) =>
        {
            await InvokeAsync(async () =>
            {
                await Task.Delay(1);
                Filtering(filterValue, ColumnName);
            }).ConfigureAwait(false);

        });

    }
}